{"version":3,"sources":["logo.svg","graphviz.js","z2mclient.js","z2mnetwork.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Graphviz","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderer","updateGraph","bind","assertThisInitialized","graph","engine","params","renderDot","window","d3","select","graphviz","height","fit","console","log","dot","react_default","a","createElement","className","React","Component","Z2mclient","onConnect","onMessage","client","prevGraph","mqtt","connect","config","server","rejectUnauthorized","subscribe","on","publish","topic","payload","TextDecoder","decode","setTimeout","Z2mnetwork","prevgraph","state","status","dotparams","clientConfig","mqttserver","setState","z2mclient","prmstr","location","search","substr","prmarr","split","i","length","tmparr","transformToAssocArray","getSearchParameters","setparams","obj","src","keys","forEach","key","extend","App","z2mnetwork","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a299412b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Graphviz extends React.Component {\n    constructor(props) {\n      super(props);\n      this.renderer = null;\n      this.updateGraph = this.updateGraph.bind(this);\n    }\n\n    updateGraph(graph) {\n        if(this.renderer) {\n            this.renderer.engine(this.props.params.renderer).renderDot(graph);\n        }\n    }\n  \n    componentDidMount() {\n        this.renderer=window.d3.select(\".graph\").graphviz({height:\"700px\", fit:true});\n        console.log(this.renderer);\n    }\n\n    render() {\n        console.log(\"render graphviz\");\n//        this.updateGraph(\"digraph { a -> b;c; d -> c; a -> d; }\");\n        this.updateGraph(this.props.dot);\n        return (\n          <div className=\"Z2mnetwork\">    \n              <div className=\"graph\">\n                  hallo z2mnetwork\n              </div>\n          </div>\n        );\n    }\n}\n\nexport default Graphviz;\n  ","import React from 'react';\n\nclass Z2mclient extends React.Component {\n    constructor(props) {\n      super(props);\n      this.onConnect = this.onConnect.bind(this);\n      this.onMessage = this.onMessage.bind(this);\n      this.client = null;\n      this.prevGraph = null;\n    }\n\n    componentDidMount() {\n        //this.state.renderer.renderDot(mygraph);\n        var options = {\n          /*\n          keepalive: 10,\n          clientId: clientId,\n          protocolId: 'MQTT',\n          protocolVersion: 4,\n          clean: true,\n          reconnectPeriod: 1000,\n          connectTimeout: 30 * 1000,\n          will: {\n            topic: 'WillMsg',\n            payload: 'Connection Closed abnormally..!',\n            qos: 0,\n            retain: false\n          },\n          username: 'i_am_admin',\n          password: 'no_1_blocks_me',\n          */\n          rejectUnauthorized: false\n        }\n        \n        this.client = window.mqtt.connect(\"wss://\"+this.props.config.server, options);\n        this.client.subscribe(\"zigbee2mqtt/bridge/networkmap/graphviz\")\n        this.client.on(\"message\", this.onMessage);          \n        this.client.on('connect', this.onConnect);\n      \n    }\n\n  onConnect() {\n    console.log('Connected');\n    this.client.publish(\"zigbee2mqtt/bridge/networkmap\", \"graphviz\");\n    this.props.config.onConnect();\n  }\n\n  onMessage(topic, payload) {\n    console.log(\"z2mcl received\");\n    var graph = new TextDecoder(\"utf-8\").decode(payload);\n//    console.log(graph);\n    this.props.config.onMessage(topic, graph);\n      setTimeout( function() {\n        this.client.publish(\"zigbee2mqtt/bridge/networkmap\", \"graphviz\");  \n      }.bind(this), 10000);\n\n  }\n\n  render() {\n    console.log(\"render z2mclient\");\n    return null\n  }\n}\n\nexport default Z2mclient;\n","import React from 'react';\n//import * as d3 from 'd3'\n//import * as d3Graphviz from 'd3-graphviz';\nimport Graphviz from './graphviz.js';\nimport Z2mclient from './z2mclient.js';\n\n\nclass Z2mnetwork extends React.Component {\n    constructor(props) {\n      super(props);\n      this.prevgraph = null;\n      this.onConnect = this.onConnect.bind(this);\n      this.onMessage = this.onMessage.bind(this);\n      this.state = {\n        status: 'idle',\n        dot : null,\n        dotparams: {\n          renderer : this.props.config.renderer\n        }\n      };\n\n      this.clientConfig = {\n        onConnect: this.onConnect,\n        onMessage: this.onMessage,\n        server: this.props.config.mqttserver\n      }\n    }\n    \n    onConnect() {\n      console.log('Connected');\n      this.setState({status:\"connected\"});\n    }\n\n    onMessage(topic, payload) {\n      console.log(\"z2mn received\");\n      if(payload!==this.prevgraph) {\n        console.log('changed')\n        this.prevgraph = payload;\n        this.setState({\n          dot: payload\n        });\n      }\n    }\n\n    render() {\n      console.log(\"render z2mnetwork\");\n      return (\n        <div>\n          Renderer: {this.state.dotparams.renderer} Server: {this.clientConfig.server} Status: {this.state.status}\n          <Z2mclient config={this.clientConfig}/>\n          <Graphviz dot={this.state.dot} params={this.state.dotparams}/>\n        </div> \n      );\n    }\n  }\n\n  export default Z2mnetwork;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Z2mnetwork from './z2mnetwork.js'\n\n\nfunction getSearchParameters() {\n  var prmstr = window.location.search.substr(1);\n  return prmstr !== null && prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\n}\n\nfunction transformToAssocArray( prmstr ) {\nvar params = {};\nvar prmarr = prmstr.split(\"&\");\nfor ( var i = 0; i < prmarr.length; i++) {\n    var tmparr = prmarr[i].split(\"=\");\n    params[tmparr[0]] = tmparr[1];\n}\nreturn params;\n}\n\nfunction extend(obj, src) {\nObject.keys(src).forEach(function(key) { obj[key] = src[key]; });\nreturn obj;\n}\nvar params = getSearchParameters();\n\nvar setparams = {\nrenderer: 'dot',\nmqttserver: '192.168.178.18:9001'\n}\n\n//extend(setparams, z2mvisConfig);\nextend(setparams, params);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Z2mnetwork config={setparams}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}